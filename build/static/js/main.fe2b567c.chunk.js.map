{"version":3,"sources":["logo.svg","assets/icons/loading.gif","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteTodo","bind","assertThisInitialized","editTodo","_this2","_this$props","todos","editing","map","_ref","index","id","name","react_default","a","createElement","key","className","onClick","ev","setState","alert","todo","newTodos","Axios","delete","concat","apiUrl","splice","objectSpread","newTodo","editingIndex","React","Component","App","state","notification","loading","handleChange","updateTodo","addTodo","generateTodoId","get","response","data","style","height","src","logo","alt","href","target","rel","App_Notification","type","onChange","value","length","loadingGif","List_List","assign","event","put","objTodo","post","toConsumableArray","lastTodo","setTimeout","Notification","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe2b567c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.61c188cc.gif\";","import React from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport default class List extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.deleteTodo = this.deleteTodo.bind(this);\r\n    this.editTodo = this.editTodo.bind(this);\r\n  }\r\n  render () {\r\n    const { todos, editing } = this.props;\r\n    if (editing) return null;\r\n    const todosElements = todos.map(({ id, name }, index) => (\r\n      <li\r\n        key={id}\r\n        className=\"list-group-item\"\r\n      >\r\n        <button\r\n          className=\"btn-sm mr-4 btn btn-warning\"\r\n          onClick={(ev) => this.editTodo(index)}\r\n        >\r\n          U\r\n        </button>\r\n        {name}\r\n        <button\r\n          className=\"btn-sm ml-4 btn btn-danger\"\r\n          onClick={(ev) => this.deleteTodo(index)}\r\n        >\r\n          X\r\n        </button>\r\n      </li>\r\n    ));\r\n\r\n    return todosElements;\r\n  }\r\n\r\n async  deleteTodo(index) {\r\n    const { todos, setState, alert } = this.props;\r\n    const todo = todos[index];\r\n    const newTodos = [...todos];\r\n    await Axios.delete(`${this.props.apiUrl}/todos/${todo.id}`)\r\n    newTodos.splice(index, 1);\r\n    setState({ ...this.props, todos: newTodos, newTodo: '', editing: false });\r\n    alert(\"Todo deleted succesfully\")\r\n  }\r\n  \r\n  editTodo(index) {\r\n    const todo = this.props.todos[index];\r\n    this.props.setState({\r\n      editing: true,\r\n      newTodo: todo.name,\r\n      editingIndex: index,\r\n    });\r\n  }\r\n}","import React, { Component } from 'react';\nimport { List } from './components';\nimport logo from './logo.svg';\nimport './App.css';\nimport Axios from 'axios';\nimport loadingGif from './assets/icons/loading.gif';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTodo: '',\n      todos: [\n      ],\n      editingIndex: null,\n      editing: false,\n      notification: null,\n      loading: true,\n    };\n    this.apiUrl = 'https://5c72bf54ba65bb0014ebf020.mockapi.io'\n    this.handleChange = this.handleChange.bind(this);\n    this.setState = this.setState.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.generateTodoId = this.generateTodoId.bind(this);\n    this.alert = this.alert.bind(this);\n  }\n  \n  componentWillMount() {\n  }\n  \n  async componentDidMount() {\n    const response = await Axios.get(`${this.apiUrl}/todos`);\n    this.setState({ todos: response.data, loading: false });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img style={{ height: 5 }} src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            CRUD React\n          </a>\n        </header>\n        <div className=\"container\">\n          <h2 className=\"text-center p-4\">Todos App</h2>\n          <Notification\n            notification={this.state.notification}\n          />\n          <input\n            type=\"text\"\n            name=\"todo\"\n            className=\"my-4 form-control\"\n            onChange={this.handleChange}\n            value={this.state.newTodo}\n          />\n          {\n            this.state.newTodo.length > 0 ?\n              <button\n                className={this.state.editing ? \"btn-warning mb-3 form-control\" : \"btn-info mb-3 form-control\"}\n                onClick={this.state.editing ? this.updateTodo : this.addTodo}\n              >\n                {this.state.editing ? 'Update todo' : 'Add Todo'}\n              </button>\n            :\n              null\n          }\n          { (this.state.loading) && <img style={{ height: 150 }} src={loadingGif} /> }\n          {\n            (!this.state.loading || this.state.editing) &&\n              <ul className=\"list-group\">\n                <List\n                  {...this.state}\n                  apiUrl={this.apiUrl}\n                  setState={this.setState}\n                  alert={this.alert}\n                />\n              </ul>\n          }\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(event) {\n    this.setState({ newTodo: event.target.value });\n  }\n\n  async updateTodo(index) {\n    const { todos, editingIndex, newTodo } = this.state;\n    const todo = todos[editingIndex];\n    todo.name = newTodo;\n    const response = await Axios.put(`${this.apiUrl}/todos/${todo.id}`, todo);\n    const newTodos = [...todos];\n    newTodos[editingIndex] = response.data;\n    this.setState({ todos: newTodos, editing: false, editingIndex: null, newTodo: '' });\n  }\n\n  async addTodo() {\n    const { todos, newTodo } = this.state;\n    const objTodo = {\n      name: newTodo\n    };\n\n    const response = await Axios.post(`${this.apiUrl}/todos`, objTodo)\n    // console.log(response);\n    this.setState({ todos: [...todos,  response.data] });\n    this.alert(\"Todo added successfully\")\n  }\n\n  generateTodoId() {\n    const lastTodo = this.state.todos[this.state.todos.length - 1];\n    if (lastTodo) return lastTodo.id + 1;\n    return 1;\n  }\n  \n  alert(notification) {\n    this.setState({ notification });\n    setTimeout(() => this.setState({ notification: null }), 2000);\n  }\n}\n\nexport default App;\n\nconst Notification = ({ notification }) => {\n  if (notification === null) return null;\n  return (\n    <div className=\"alert alert-success\">\n      <p className=\"text-center mt-3\">{notification}</p>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}